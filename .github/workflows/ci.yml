name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Setup test database
      run: |
        cd backend
        npm run init-db

    - name: Run linting
      run: |
        cd backend
        npm run lint 2>/dev/null || echo "No lint script found"

    - name: Run tests
      run: |
        cd backend
        npm run test:ci

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/coverage
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          backend/coverage/
          backend/test-results/
        retention-days: 30

  test-integration:
    runs-on: ubuntu-latest
    needs: test-backend

    services:
      sqlite3:
        image: sqlite3:latest
        options: >-
          --health-cmd "sqlite3 --version"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run integration tests
      run: |
        cd backend
        npm run test:runner -- --integration --ci

    - name: Run performance tests
      run: |
        cd backend
        npm run test:runner -- --performance --ci

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Run security audit
      run: |
        cd backend
        npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=backend/package.json

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-integration]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend
        npm ci --production

    - name: Build application
      run: |
        cd backend
        npm run build 2>/dev/null || echo "No build script found"

    - name: Run production tests
      run: |
        cd backend
        NODE_ENV=production npm run test:ci

    - name: Create deployment package
      run: |
        cd backend
        mkdir -p dist
        cp -r * dist/ 2>/dev/null || true
        cp .env.example dist/ 2>/dev/null || true

    - name: Deploy to staging
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🚀 Deployment to staging would happen here"
        echo "📦 Package ready in backend/dist/"
        echo "🔧 Configure your deployment provider (Render, Heroku, etc.)"

  notify:
    runs-on: ubuntu-latest
    needs: [test-backend, test-integration, security-scan]
    if: always()

    steps:
    - name: Get test results
      id: test-results
      run: |
        if [ ${{ needs.test-backend.result }} == 'success' ] && [ ${{ needs.test-integration.result }} == 'success' ]]; then
          echo "result=success" >> $GITHUB_OUTPUT
          echo "message=✅ All tests passed!" >> $GITHUB_OUTPUT
        else
          echo "result=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Some tests failed. Check the logs for details." >> $GITHUB_OUTPUT
        fi

    - name: Send notification
      uses: 8398a7/action-slack@v3
      if: always() && github.event_name == 'push'
      with:
        status: ${{ steps.test-results.outputs.result }}
        text: ${{ steps.test-results.outputs.message }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  coverage-badge:
    runs-on: ubuntu-latest
    needs: test-backend
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate coverage badge
      uses: actions/checkout@v4
      with:
        repository: badgen/badgen
        path: badgen

    - name: Update coverage badge
      run: |
        cd badgen
        npm install
        node scripts/build-badge.js \
          --label "coverage" \
          --status "unknown%" \
          --color "blue" \
          --output "../../coverage-badge.svg"

    - name: Commit badge update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add coverage-badge.svg
        git commit -m "Update coverage badge" || echo "No changes to commit"
